[
  {
    "id": "action_show",
    "name": "show",
    "parent": "",
    "description": "Makes a component visible by setting its visible property to true. Used to reveal hidden components, modal dialogs, or UI elements.",
    "category": "action-visibility",
    "usage": "Use when you need to make hidden UI elements visible, such as showing modals, revealing sidebars, or displaying notifications.",
    "examples": [
      "Show a modal dialog",
      "Reveal a sidebar",
      "Display notification"
    ],
    "props": [
      {
        "name": "target",
        "type": "String",
        "required": true,
        "description": "ID of the component to show"
      }
    ],
    "children": null,
    "embeddingText": "Action: show\nCategory: action-visibility\nDescription: Makes a component visible by setting its visible property to true. Used to reveal hidden components, modal dialogs, or UI elements.\nUsage: Use when you need to make hidden UI elements visible, such as showing modals, revealing sidebars, or displaying notifications.\nExamples: Show a modal dialog, Reveal a sidebar, Display notification\nRequired: target (String) - ID of the component to show\nExample: {\"action\": \"show\", \"target\": \"modal-dialog\"}"
  },
  {
    "id": "action_hide",
    "name": "hide",
    "parent": "",
    "description": "Hides a component by setting its visible property to false. Used to hide components, close modals, or remove UI elements from view.",
    "category": "action-visibility",
    "usage": "Use when you need to hide UI elements, such as closing modals, hiding notifications, or collapsing menus.",
    "examples": [
      "Hide a notification",
      "Close a dropdown menu",
      "Hide loading spinner"
    ],
    "props": [
      {
        "name": "target",
        "type": "String",
        "required": true,
        "description": "ID of the component to hide"
      }
    ],
    "children": null,
    "embeddingText": "Action: hide\nCategory: action-visibility\nDescription: Hides a component by setting its visible property to false. Used to hide components, close modals, or remove UI elements from view.\nUsage: Use when you need to hide UI elements, such as closing modals, hiding notifications, or collapsing menus.\nExamples: Hide a notification, Close a dropdown menu, Hide loading spinner\nRequired: target (String) - ID of the component to hide\nExample: {\"action\": \"hide\", \"target\": \"notification-banner\"}"
  },
  {
    "id": "action_toggle",
    "name": "toggle",
    "parent": "",
    "description": "Toggles a component's visibility (visible becomes hidden, hidden becomes visible). Used for toggle buttons, accordion panels, or any show/hide functionality.",
    "category": "action-visibility",
    "usage": "Use for interactive elements that need to switch between visible and hidden states, like navigation menus, accordions, or settings panels.",
    "examples": [
      "Toggle navigation menu",
      "Toggle settings panel",
      "Toggle accordion section"
    ],
    "props": [
      {
        "name": "target",
        "type": "String",
        "required": true,
        "description": "ID of the component to toggle"
      }
    ],
    "children": null,
    "embeddingText": "Action: toggle\nCategory: action-visibility\nDescription: Toggles a component's visibility (visible becomes hidden, hidden becomes visible). Used for toggle buttons, accordion panels, or any show/hide functionality.\nUsage: Use for interactive elements that need to switch between visible and hidden states, like navigation menus, accordions, or settings panels.\nExamples: Toggle navigation menu, Toggle settings panel, Toggle accordion section\nRequired: target (String) - ID of the component to toggle\nExample: {\"action\": \"toggle\", \"target\": \"nav-menu\"}"
  },
  {
    "id": "action_update",
    "name": "update",
    "parent": "",
    "description": "Updates the content or properties of a component. Requires both target and payload fields. Used to change text, update component properties, or modify visual appearance.",
    "category": "action-content",
    "usage": "Use when you need to modify existing components, such as updating button text, changing component properties, or refreshing content.",
    "examples": [
      "Update button text",
      "Update component properties",
      "Update counter value"
    ],
    "props": [
      {
        "name": "target",
        "type": "String",
        "required": true,
        "description": "ID of the component to update"
      },
      {
        "name": "payload",
        "type": "Object",
        "required": true,
        "description": "Data containing updates for content or properties"
      }
    ],
    "children": null,
    "embeddingText": "Action: update\nCategory: action-content\nDescription: Updates the content or properties of a component. Requires both target and payload fields. Used to change text, update component properties, or modify visual appearance.\nUsage: Use when you need to modify existing components, such as updating button text, changing component properties, or refreshing content.\nExamples: Update button text, Update component properties, Update counter value\nRequired: target (String) - ID of the component to update, payload (Object) - Data containing updates for content or properties\nExample: {\"action\": \"update\", \"target\": \"submit-button\", \"payload\": {\"content\": \"Loading...\"}}"
  },
  {
    "id": "action_create",
    "name": "create",
    "parent": "",
    "description": "Creates a new component dynamically. Requires payload field, target is optional. Used to add new items to lists, create dynamic content, or spawn new UI elements.",
    "category": "action-lifecycle",
    "usage": "Use when you need to dynamically add new components, such as adding todo items, creating notifications, or generating new form fields.",
    "examples": [
      "Create a new todo item",
      "Add notification",
      "Create new form field"
    ],
    "props": [
      {
        "name": "payload",
        "type": "Object",
        "required": true,
        "description": "Data for creating the new component including type, properties, and content"
      },
      {
        "name": "target",
        "type": "String",
        "required": false,
        "description": "Optional parent container where the new component should be added"
      }
    ],
    "children": null,
    "embeddingText": "Action: create\nCategory: action-lifecycle\nDescription: Creates a new component dynamically. Requires payload field, target is optional. Used to add new items to lists, create dynamic content, or spawn new UI elements.\nUsage: Use when you need to dynamically add new components, such as adding todo items, creating notifications, or generating new form fields.\nExamples: Create a new todo item, Add notification, Create new form field\nRequired: payload (Object) - Data for creating the new component including type, properties, and content\nOptional: target (String) - Optional parent container where the new component should be added\nExample: {\"action\": \"create\", \"target\": \"todo-list\", \"payload\": {\"type\": \"todo-item\", \"text\": \"New task\", \"id\": \"todo-item-123\", \"completed\": false}}"
  },
  {
    "id": "action_destroy",
    "name": "destroy",
    "parent": "",
    "description": "Removes a component from the UI completely. Requires target field. Used to delete items from lists, remove dynamic content, or clean up UI elements. Also known as delete or remove action.",
    "category": "action-lifecycle",
    "usage": "Use when you need to permanently remove components, such as deleting todo items, removing notifications, or cleaning up temporary elements.",
    "examples": [
      "Delete a todo item",
      "Remove notification",
      "Delete dynamic component"
    ],
    "props": [
      {
        "name": "target",
        "type": "String",
        "required": true,
        "description": "ID of the component to remove/delete/destroy"
      }
    ],
    "children": null,
    "embeddingText": "Action: destroy (also delete, remove)\nCategory: action-lifecycle\nDescription: Removes a component from the UI completely. Requires target field. Used to delete items from lists, remove dynamic content, or clean up UI elements. Also known as delete or remove action.\nUsage: Use when you need to permanently remove components, such as deleting todo items, removing notifications, or cleaning up temporary elements.\nExamples: Delete a todo item, Remove notification, Delete dynamic component\nRequired: target (String) - ID of the component to remove/delete/destroy\nExample: {\"action\": \"destroy\", \"target\": \"todo-item-1\"} or {\"action\": \"delete\", \"target\": \"todo-item-1\"}"
  },
  {
    "id": "action_setState",
    "name": "setState",
    "parent": "",
    "description": "Updates the global state or component local state. Requires payload field, target is optional. Used to manage application state, store user preferences, or update component data.",
    "category": "action-state",
    "usage": "Use when you need to update application state, such as storing user data, updating preferences, or managing component-specific state.",
    "examples": [
      "Update global user state",
      "Update component state",
      "Store form data"
    ],
    "props": [
      {
        "name": "payload",
        "type": "Object",
        "required": true,
        "description": "State data to update"
      },
      {
        "name": "target",
        "type": "String",
        "required": false,
        "description": "Optional component ID for local state updates"
      }
    ],
    "children": null,
    "embeddingText": "Action: setState\nCategory: action-state\nDescription: Updates the global state or component local state. Requires payload field, target is optional. Used to manage application state, store user preferences, or update component data.\nUsage: Use when you need to update application state, such as storing user data, updating preferences, or managing component-specific state.\nExamples: Update global user state, Update component state, Store form data\nRequired: payload (Object) - State data to update\nOptional: target (String) - Optional component ID for local state updates\nExample: {\"action\": \"setState\", \"payload\": {\"user\": {\"name\": \"John Doe\", \"authenticated\": true}}}"
  },
  {
    "id": "action_submit",
    "name": "submit",
    "parent": "",
    "description": "Collects form data and submits it to an endpoint or processes it. Requires payload field, target is optional. Used for form submissions, data collection, or triggering data processing.",
    "category": "action-data",
    "usage": "Use when you need to submit form data, send data to an API endpoint, or trigger data processing workflows.",
    "examples": [
      "Submit login form",
      "Submit contact form",
      "Submit registration"
    ],
    "props": [
      {
        "name": "payload",
        "type": "Object",
        "required": true,
        "description": "Submit configuration including fields, endpoint, and success/error handlers"
      },
      {
        "name": "target",
        "type": "String",
        "required": false,
        "description": "Optional form container ID"
      }
    ],
    "children": null,
    "embeddingText": "Action: submit\nCategory: action-data\nDescription: Collects form data and submits it to an endpoint or processes it. Requires payload field, target is optional. Used for form submissions, data collection, or triggering data processing.\nUsage: Use when you need to submit form data, send data to an API endpoint, or trigger data processing workflows.\nExamples: Submit login form, Submit contact form, Submit registration\nRequired: payload (Object) - Submit configuration including fields, endpoint, and success/error handlers\nOptional: target (String) - Optional form container ID\nExample: {\"action\": \"submit\", \"payload\": {\"fields\": [\"username\", \"password\"], \"endpoint\": \"/api/login\", \"method\": \"POST\", \"onSuccess\": {\"action\": \"navigate\", \"payload\": {\"route\": \"/dashboard\"}}}}"
  },
  {
    "id": "action_validate",
    "name": "validate",
    "parent": "",
    "description": "Validates form fields according to specified rules. Requires payload field, target is optional. Used for form validation, input checking, or data verification.",
    "category": "action-data",
    "usage": "Use when you need to validate user input, check form completeness, or verify data before submission.",
    "examples": [
      "Validate email field",
      "Validate required fields",
      "Validate password strength"
    ],
    "props": [
      {
        "name": "payload",
        "type": "Object",
        "required": true,
        "description": "Validation rules and handlers for valid/invalid states"
      },
      {
        "name": "target",
        "type": "String",
        "required": false,
        "description": "Optional form or field container ID"
      }
    ],
    "children": null,
    "embeddingText": "Action: validate\nCategory: action-data\nDescription: Validates form fields according to specified rules. Requires payload field, target is optional. Used for form validation, input checking, or data verification.\nUsage: Use when you need to validate user input, check form completeness, or verify data before submission.\nExamples: Validate email field, Validate required fields, Validate password strength\nRequired: payload (Object) - Validation rules and handlers for valid/invalid states\nOptional: target (String) - Optional form or field container ID\nExample: {\"action\": \"validate\", \"payload\": {\"fields\": {\"email\": {\"required\": true, \"pattern\": \"email\", \"message\": \"Please enter a valid email\"}}, \"onValid\": {\"action\": \"submit\", \"payload\": {\"endpoint\": \"/api/register\"}}, \"onInvalid\": {\"action\": \"show\", \"target\": \"error-message\"}}}"
  },
  {
    "id": "action_navigate",
    "name": "navigate",
    "parent": "",
    "description": "Navigates to a different page or route. Requires payload field. Used for page transitions, routing, or redirecting users.",
    "category": "action-navigation",
    "usage": "Use when you need to change the current page or route, such as after form submission, login success, or menu navigation.",
    "examples": [
      "Navigate to dashboard",
      "Redirect to login",
      "Go to profile page"
    ],
    "props": [
      {
        "name": "payload",
        "type": "Object",
        "required": true,
        "description": "Navigation configuration including route, replace flag, and optional state"
      }
    ],
    "children": null,
    "embeddingText": "Action: navigate\nCategory: action-navigation\nDescription: Navigates to a different page or route. Requires payload field. Used for page transitions, routing, or redirecting users.\nUsage: Use when you need to change the current page or route, such as after form submission, login success, or menu navigation.\nExamples: Navigate to dashboard, Redirect to login, Go to profile page\nRequired: payload (Object) - Navigation configuration including route, replace flag, and optional state\nExample: {\"action\": \"navigate\", \"payload\": {\"route\": \"/dashboard\", \"replace\": false}}"
  },
  {
    "id": "action_animate",
    "name": "animate",
    "parent": "",
    "description": "Triggers an animation on a component. Requires target field, payload is optional. Used to create visual feedback, transitions, or attention-grabbing effects.",
    "category": "action-animation",
    "usage": "Use when you need to provide visual feedback, such as button click animations, error indicators, or loading states.",
    "examples": [
      "Animate button click",
      "Shake invalid input",
      "Fade in element"
    ],
    "props": [
      {
        "name": "target",
        "type": "String",
        "required": true,
        "description": "ID of the component to animate"
      },
      {
        "name": "payload",
        "type": "Object",
        "required": false,
        "description": "Optional animation configuration including type and duration"
      }
    ],
    "children": null,
    "embeddingText": "Action: animate\nCategory: action-animation\nDescription: Triggers an animation on a component. Requires target field, payload is optional. Used to create visual feedback, transitions, or attention-grabbing effects.\nUsage: Use when you need to provide visual feedback, such as button click animations, error indicators, or loading states.\nExamples: Animate button click, Shake invalid input, Fade in element\nRequired: target (String) - ID of the component to animate\nOptional: payload (Object) - Optional animation configuration including type and duration\nExample: {\"action\": \"animate\", \"target\": \"submit-button\", \"payload\": {\"type\": \"pulse\", \"duration\": 300}}"
  },
  {
    "id": "action_collect",
    "name": "collect",
    "parent": "",
    "description": "Collects data from form fields and stores it locally. Requires payload field, target is optional. Used to gather form data before submission or validation.",
    "category": "action-data",
    "usage": "Use when you need to gather form data for processing, validation, or temporary storage before submission.",
    "examples": [
      "Collect form data",
      "Collect survey data",
      "Collect search filters"
    ],
    "props": [
      {
        "name": "payload",
        "type": "Object",
        "required": true,
        "description": "Collection configuration including fields and collection ID"
      },
      {
        "name": "target",
        "type": "String",
        "required": false,
        "description": "Optional form container ID"
      }
    ],
    "children": null,
    "embeddingText": "Action: collect\nCategory: action-data\nDescription: Collects data from form fields and stores it locally. Requires payload field, target is optional. Used to gather form data before submission or validation.\nUsage: Use when you need to gather form data for processing, validation, or temporary storage before submission.\nExamples: Collect form data, Collect survey data, Collect search filters\nRequired: payload (Object) - Collection configuration including fields and collection ID\nOptional: target (String) - Optional form container ID\nExample: {\"action\": \"collect\", \"payload\": {\"fields\": [\"firstName\", \"lastName\", \"email\"], \"collectionId\": \"user-registration\"}}"
  }
]
