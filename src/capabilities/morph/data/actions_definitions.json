{
  "actions": [
    {
      "name": "show",
      "category": "visibility",
      "description": "Makes a component visible by setting its visible property to true",
      "usage": "Used to reveal hidden components, modal dialogs, or UI elements",
      "required_fields": ["target"],
      "optional_fields": [],
      "target_required": true,
      "payload_required": false,
      "examples": [
        {
          "description": "Show a modal dialog",
          "code": {
            "action": "show",
            "target": "modal-dialog"
          }
        },
        {
          "description": "Reveal a sidebar",
          "code": {
            "action": "show",
            "target": "sidebar-menu"
          }
        }
      ]
    },
    {
      "name": "hide",
      "category": "visibility",
      "description": "Hides a component by setting its visible property to false",
      "usage": "Used to hide components, close modals, or remove UI elements from view",
      "required_fields": ["target"],
      "optional_fields": [],
      "target_required": true,
      "payload_required": false,
      "examples": [
        {
          "description": "Hide a notification",
          "code": {
            "action": "hide",
            "target": "notification-banner"
          }
        },
        {
          "description": "Close a dropdown menu",
          "code": {
            "action": "hide",
            "target": "dropdown-menu"
          }
        }
      ]
    },
    {
      "name": "toggle",
      "category": "visibility",
      "description": "Toggles a component's visibility (visible becomes hidden, hidden becomes visible)",
      "usage": "Used for toggle buttons, accordion panels, or any show/hide functionality",
      "required_fields": ["target"],
      "optional_fields": [],
      "target_required": true,
      "payload_required": false,
      "examples": [
        {
          "description": "Toggle navigation menu",
          "code": {
            "action": "toggle",
            "target": "nav-menu"
          }
        },
        {
          "description": "Toggle settings panel",
          "code": {
            "action": "toggle",
            "target": "settings-panel"
          }
        }
      ]
    },
    {
      "name": "update",
      "category": "content",
      "description": "Updates the content or properties of a component",
      "usage": "Used to change text, update component properties, or modify visual appearance",
      "required_fields": ["target", "payload"],
      "optional_fields": [],
      "target_required": true,
      "payload_required": true,
      "examples": [
        {
          "description": "Update button text",
          "code": {
            "action": "update",
            "target": "submit-button",
            "payload": {
              "content": "Loading..."
            }
          }
        },
        {
          "description": "Update component properties",
          "code": {
            "action": "update",
            "target": "status-indicator",
            "payload": {
              "properties": {
                "className": "status-success",
                "variant": "success"
              }
            }
          }
        }
      ]
    },
    {
      "name": "create",
      "category": "lifecycle",
      "description": "Creates a new component dynamically. The payload defines the new component. An optional 'clearAfter' field (array of component IDs) can be included in the payload to clear specified input fields after creation.",
      "usage": "Used to add new items to lists, create dynamic content, or spawn new UI elements. Can also clear input fields post-creation via 'clearAfter' in payload.",
      "required_fields": ["payload"],
      "optional_fields": ["target"],
      "target_required": false,
      "payload_required": true,
      "payload_schema": {
        "type": "object",
        "properties": {
          "id": {"type": "string", "description": "Unique ID for the new component. Can use {timestamp}."},
          "type": {"type": "string", "description": "Type of the new component (e.g., 'div', 'button', 'custom-type')."},
          "content": {"type": "string", "description": "Text content for the component. Can use template variables like {input-id.value}."},
          "properties": {"type": "object", "description": "Map of component-specific properties (e.g., className, styles)."},
          "local_state": {"type": "object", "description": "Initial local state for the new component."},
          "children": {"type": "array", "items": {"type": "object"}, "description": "Array of child component definitions."},
          "clearAfter": {
            "type": "array",
            "items": {"type": "string"},
            "description": "Optional. Array of component IDs (e.g., input fields) to clear (set value to empty string) after this component is successfully created."
          }
        },
        "required": ["id", "type"]
      },
      "examples": [
        {
          "description": "Create a new todo item and clear the input field",
          "code": {
            "action": "create",
            "target": "todo-list",
            "payload": {
              "id": "todo-item-{timestamp}",
              "type": "div",
              "properties": {"className": "todo-item"},
              "content": "{new-todo-input.value}",
              "children": [
                {"id": "todo-text-{timestamp}", "type": "label", "content": "{new-todo-input.value}"},
                {"id": "delete-btn-{timestamp}", "type": "button", "content": "Delete", "events": {"onClick": {"action": "destroy", "target": "todo-item-{timestamp}"}}}
              ],
              "clearAfter": ["new-todo-input"]
            }
          }
        },
        {
          "description": "Add a notification (without clearing anything)",
          "code": {
            "action": "create",
            "payload": {
              "type": "notification",
              "message": "Operation successful",
              "variant": "success",
              "id": "notification-{timestamp}"
            }
          }
        }
      ]
    },
    {
      "name": "destroy",
      "category": "lifecycle",
      "description": "Removes a component from the UI completely",
      "usage": "Used to delete items from lists, remove dynamic content, or clean up UI elements",
      "required_fields": ["target"],
      "optional_fields": [],
      "target_required": true,
      "payload_required": false,
      "examples": [
        {
          "description": "Delete a todo item",
          "code": {
            "action": "destroy",
            "target": "todo-item-1"
          }
        },
        {
          "description": "Remove notification",
          "code": {
            "action": "destroy",
            "target": "notification-banner"
          }
        }
      ]
    },
    {
      "name": "setState",
      "category": "state",
      "description": "Updates the global state or component local state",
      "usage": "Used to manage application state, store user preferences, or update component data",
      "required_fields": ["payload"],
      "optional_fields": ["target"],
      "target_required": false,
      "payload_required": true,
      "examples": [
        {
          "description": "Update global user state",
          "code": {
            "action": "setState",
            "payload": {
              "user": {
                "name": "John Doe",
                "authenticated": true
              }
            }
          }
        },
        {
          "description": "Update component state",
          "code": {
            "action": "setState",
            "target": "counter-component",
            "payload": {
              "count": 5,
              "enabled": true
            }
          }
        }
      ]
    },
    {
      "name": "animate",
      "category": "animation",
      "description": "Triggers an animation on a component",
      "usage": "Used to create visual feedback, transitions, or attention-grabbing effects",
      "required_fields": ["target"],
      "optional_fields": ["payload"],
      "target_required": true,
      "payload_required": false,
      "examples": [
        {
          "description": "Animate button click",
          "code": {
            "action": "animate",
            "target": "submit-button",
            "payload": {
              "type": "pulse",
              "duration": 300
            }
          }
        },
        {
          "description": "Shake invalid input",
          "code": {
            "action": "animate",
            "target": "email-input",
            "payload": {
              "type": "shake",
              "duration": 500
            }
          }
        }
      ]
    },
    {
      "name": "navigate",
      "category": "navigation",
      "description": "Navigates to a different page or route",
      "usage": "Used for page transitions, routing, or redirecting users",
      "required_fields": ["payload"],
      "optional_fields": [],
      "target_required": false,
      "payload_required": true,
      "examples": [
        {
          "description": "Navigate to dashboard",
          "code": {
            "action": "navigate",
            "payload": {
              "route": "/dashboard",
              "replace": false
            }
          }
        },
        {
          "description": "Redirect to login",
          "code": {
            "action": "navigate",
            "payload": {
              "route": "/login",
              "replace": true
            }
          }
        }
      ]
    },
    {
      "name": "submit",
      "category": "data",
      "description": "Collects form data and submits it to an endpoint or processes it",
      "usage": "Used for form submissions, data collection, or triggering data processing",
      "required_fields": ["payload"],
      "optional_fields": ["target"],
      "target_required": false,
      "payload_required": true,
      "examples": [
        {
          "description": "Submit login form",
          "code": {
            "action": "submit",
            "payload": {
              "fields": ["username", "password"],
              "endpoint": "/api/login",
              "method": "POST",
              "onSuccess": {
                "action": "navigate",
                "payload": {
                  "route": "/dashboard"
                }
              }
            }
          }
        },
        {
          "description": "Submit contact form",
          "code": {
            "action": "submit",
            "target": "contact-form",
            "payload": {
              "fields": ["name", "email", "message"],
              "endpoint": "/api/contact",
              "onSuccess": {
                "action": "show",
                "target": "success-message"
              }
            }
          }
        }
      ]
    },
    {
      "name": "collect",
      "category": "data",
      "description": "Collects data from form fields and stores it locally",
      "usage": "Used to gather form data before submission or validation",
      "required_fields": ["payload"],
      "optional_fields": ["target"],
      "target_required": false,
      "payload_required": true,
      "examples": [
        {
          "description": "Collect form data",
          "code": {
            "action": "collect",
            "payload": {
              "fields": ["firstName", "lastName", "email"],
              "collectionId": "user-registration"
            }
          }
        }
      ]
    },
    {
      "name": "validate",
      "category": "data",
      "description": "Validates form fields according to specified rules",
      "usage": "Used for form validation, input checking, or data verification",
      "required_fields": ["payload"],
      "optional_fields": ["target"],
      "target_required": false,
      "payload_required": true,
      "examples": [
        {
          "description": "Validate email field",
          "code": {
            "action": "validate",
            "payload": {
              "fields": {
                "email": {
                  "required": true,
                  "pattern": "email",
                  "message": "Please enter a valid email"
                }
              },
              "onValid": {
                "action": "submit",
                "payload": {
                  "endpoint": "/api/register"
                }
              },
              "onInvalid": {
                "action": "show",
                "target": "error-message"
              }
            }
          }
        }
      ]
    }
  ],
  "component_types": [
    {
      "name": "div",
      "description": "A generic container element. Can contain text content or other child elements. Useful for layout and grouping.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes for styling."}
      }
    },
    {
      "name": "card",
      "description": "A container styled as a card, typically with a border, padding, and shadow. Good for grouping related information.",
      "properties": {
        "className": {"type": "string", "description": "Additional CSS classes for styling."}
      }
    },
    {
      "name": "button",
      "description": "An interactive button element. Can have different visual variants.",
      "properties": {
        "className": {"type": "string", "description": "Additional CSS classes."},
        "variant": {"type": "string", "enum": ["primary", "secondary", "danger", "outline"], "description": "Button style variant."}
      },
      "events": ["onClick"]
    },
    {
      "name": "input",
      "description": "An input field for user data entry.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes."},
        "type": {"type": "string", "enum": ["text", "password", "email", "number", "date"], "description": "Input type."},
        "placeholder": {"type": "string", "description": "Placeholder text."}
      },
      "state_values": ["value"]
    },
    {
      "name": "label",
      "description": "A text label, often used for form fields or titles.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes."}
      }
    },
    {
      "name": "form",
      "description": "A container for input fields that can be submitted.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes."}
      },
      "events": ["onSubmit"]
    },
    {
      "name": "nav",
      "description": "A navigation container, often for lists of links.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes."}
      }
    },
    {
      "name": "header",
      "description": "A header section element.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes."}
      }
    },
    {
      "name": "main",
      "description": "A main content section element.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes."}
      }
    },
    {
      "name": "footer",
      "description": "A footer section element.",
      "properties": {
        "className": {"type": "string", "description": "CSS classes."}
      }
    },
    {
      "name": "code-editor",
      "description": "A code editor component with syntax highlighting and line numbers. The 'content' field is used for initial code. The current code value is stored in local_state.value.",
      "properties": {
        "className": {"type": "string", "description": "Additional CSS classes for the container."},
        "language": {"type": "string", "default": "rust", "description": "The programming language for syntax highlighting (e.g., 'rust', 'javascript', 'python', 'html')."}
      },
      "state_values": ["value"],
      "default_content_is_value": true
    }
  ],
  "action_patterns": {
    "form_submission_flow": [
      {
        "step": 1,
        "action": "collect",
        "description": "First collect the form data"
      },
      {
        "step": 2,
        "action": "validate",
        "description": "Then validate the collected data"
      },
      {
        "step": 3,
        "action": "submit",
        "description": "Finally submit if validation passes"
      }
    ],
    "dynamic_list_management": [
      {
        "action": "create",
        "description": "Add new items to lists"
      },
      {
        "action": "update",
        "description": "Modify existing items"
      },
      {
        "action": "destroy",
        "description": "Remove items from lists"
      }
    ],
    "modal_dialog_flow": [
      {
        "action": "show",
        "description": "Open the modal"
      },
      {
        "action": "hide",
        "description": "Close the modal"
      }
    ]
  },
  "best_practices": {
    "target_naming": {
      "description": "Use descriptive IDs that indicate the component's purpose",
      "examples": ["submit-button", "user-profile-modal", "todo-item-1"]
    },
    "payload_structure": {
      "description": "Use clear, structured payloads with meaningful property names",
      "examples": [
        {
          "action": "create",
          "payload": {
            "type": "notification",
            "message": "Success!",
            "variant": "success",
            "duration": 3000
          }
        }
      ]
    },
    "action_chaining": {
      "description": "Use onSuccess, onValid, onInvalid to chain actions together",
      "examples": [
        {
          "action": "submit",
          "payload": {
            "onSuccess": {
              "action": "navigate",
              "payload": {
                "route": "/success"
              }
            }
          }
        }
      ]
    }
  }
}
